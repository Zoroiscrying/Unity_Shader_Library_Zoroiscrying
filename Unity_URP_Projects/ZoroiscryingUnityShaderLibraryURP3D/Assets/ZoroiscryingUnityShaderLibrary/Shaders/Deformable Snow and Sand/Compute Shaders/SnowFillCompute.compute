// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "DeformableSnowAndSandShaderUtility.hlsl"

// 1<<16; 1<<6; 1<<0
// Use Step to clamp
// 32bits, 16bits for deformation height, 10bits for foot deformation, 6bits for timer.
uniform RWTexture2D<uint> SnowDepressionTexture;

float hash( float n ) { return frac(sin(n)*753.5453123); }
// parameter noise
float noise_p(float3 x)
{
    float3 p = floor(x);
    float3 f = frac(x);
    f = f*f*(3.0-2.0*f);
	
    float n = p.x + p.y*157.0 + 113.0*p.z;
    return lerp(lerp(lerp( hash(n+  0.0), hash(n+  1.0),f.x),
                   lerp( hash(n+157.0), hash(n+158.0),f.x),f.y),
               lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
                   lerp( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);
}

float ScrollNoise(float3 pos, float speed, float scale, float3 dir, float amount, float bias = 0.0, float mult = 1.0)
{
    float time = _Time.y * speed;
    float noiseScale = scale;
    float3 noiseScroll = dir * time;
    float3 q = pos - noiseScroll;
    q *= scale;
    float f = 0;
    f = 0.5 * noise_p(q);
    // scroll the next octave in the opposite direction to get some morphing instead of just scrolling
    q += noiseScroll * scale;
    q = q * 2.01;
    f += 0.25 * noise_p(q);

    f += bias;
    f *= mult;

    f = max(f, 0.0);
    return lerp(1.0, f, amount);
}

float UniformSnowFillRate;
float DeltaTime;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float depression_height_ws;
    float foot_height_ws;
    float timer;
    
    ExtractDepressionDataFromUInt32(SnowDepressionTexture[id.xy], depression_height_ws, foot_height_ws, timer);

    // we should consider the minimum interval of our texture, being 16bits representing 16 meters, bit interval being 2^4 / 2^16 = 0.00024
    // considering a delta-time of avg 60fps, which is 1 / 60 = 0.0166666..., we have a min multiplier of 0.00024 / (1/60) = 0.0144.
    // of course, we can change the delta-time of snow fill to 30fps, 24fps, to have a smaller fill rate in the case of the minimum interval of bit texture

    depression_height_ws += unity_DeltaTime.z * 0.02f;
    foot_height_ws += unity_DeltaTime.z * 0.02f;
    
    SnowDepressionTexture[id.xy] = EmbedSnowDepressionDataToUInt32(
        depression_height_ws - CurrentMinimumHeightWorldSpace,
        foot_height_ws - CurrentMinimumHeightWorldSpace,
        timer);
}
